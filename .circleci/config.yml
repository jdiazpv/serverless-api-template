# Note: YAML anchors allow an object to be re-used, reducing duplication. The ampersand
# declares an alias for an object, then later the `<<: *alias` syntax dereferences it.
#
# See http://blog.daemonl.com/2016/02/yaml.html and
# https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd
# for more information about how to use anchors.
#
# To validate changes use an online parser, eg. http://yaml-online-parser.appspot.com/
anchors:
  node-container-config: &node-container-config
    docker:
      - image: circleci/node

  python-container-config: &python-container-config
    docker:
      - image: circleci/python

  load-dependency-cache: &load-dependency-cache
    restore_cache:
      key: dependency-cache-{{ checksum "package-lock.json" }}

  configure-aws-access: &configure-aws-access
    run:
      name: Configure AWS access
      command: |
        mkdir -p ~/.aws
        cat > ~/.aws/credentials \<< EOL
        [default]
        aws_access_key_id = $AWS_ACCESS_KEY
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
        EOL

  only-branches: &only-branches
    filters:
      branches:
        ignore: master

  only-master: &only-master
    filters:
      branches:
        only: master

## Circle CI configuration, see https://circleci.com/docs/2.0/configuration-reference/
version: 2.1
jobs:
  install:
    <<: *node-container-config
    steps:
      - checkout
      - *load-dependency-cache
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

  unit-test:
    <<: *node-container-config
    steps:
      - checkout
      - *load-dependency-cache
      - run:
          name: Run unit tests
          command: npm test
      - store_artifacts:
          path: coverage
      - run:
          name: Send unit test coverage to Codecov
          command: npm run codecov

  generate-docs:
    <<: *node-container-config
    steps:
      - checkout
      - *load-dependency-cache
      - run:
          name: Generate documentation
          command: npm run generate-docs
      # Save generated docs for publishing
      - persist_to_workspace:
          root: .
          paths:
            - docs

  deploy:
    description: Deploy the app to the specified stage
    <<: *node-container-config
    parameters:
      stage:
        description: Stage to deploy to
        type: string
        default: ''
    steps:
      - checkout
      - *load-dependency-cache
      - *configure-aws-access
      - run:
          name: Deploy stack
          no_output_timeout: 90m # increase timeout to allow for CloudFront deployment
          command: |
            STAGE=<< parameters.stage >>
            [[ ! -z "$STAGE" ]] || STAGE=${CIRCLE_BRANCH%%/*}
            echo Deploying app for stage $STAGE
            npm run deploy -- --stage $STAGE
      # save the .serverless folder to enable looking up and calling the endpoints during e2e testing
      - persist_to_workspace:
          root: .
          paths:
            - .serverless

  test-deployed-app:
    description: Test the app deployed to the specified stage
    <<: *node-container-config
    parameters:
      stage:
        description: Stage to test
        type: string
        default: ''
    steps:
      - checkout
      - *load-dependency-cache
      - attach_workspace:
          at: .
      - run:
          name: Test deployed stack
          command: npm run e2e-test

  publish-docs:
    <<: *python-container-config
    parameters:
      stage:
        description: Stage to publish docs to
        type: string
        default: ''
    steps:
      - checkout
      - *load-dependency-cache
      - *configure-aws-access
      # load docs directory for generated documentation files
      - attach_workspace:
          at: .
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Install jq and yq
          command: sudo apt-get install jq && sudo pip install yq
      - run:
          name: Publish api documentation
          command: |
            STAGE=<< parameters.stage >>
            [[ ! -z "$STAGE" ]] || STAGE=${CIRCLE_BRANCH%%/*}
            echo Publishing api documentation for stage $STAGE
            # TODO figure out how to simplify getting the bucket name from outputs.yml
            STRING_BUCKET=$(yq .ApiDocumentationBucket < .serverless/stack-output/outputs.yml)
            BUCKET=$(sed -e 's/^"//' -e 's/"$//' \<<< $STRING_BUCKET)
            aws s3 sync docs s3://$BUCKET/ --delete --acl public-read

workflows:
  version: 2

  build-test-and-deploy:
    jobs:
      # Always install, unit test, and generate API documentation
      - install
      - generate-docs:
          requires: [install]
      - unit-test:
          requires: [install]

      # On non-master branches deploy and test branch-based ephemeral stages
      - deploy:
          name: deploy-branch
          <<: *only-branches
          context: pariveda-serverless-aws
          requires: [unit-test]
      - test-deployed-app:
          name: test-branch
          <<: *only-branches
          requires: [deploy-branch]
      - publish-docs:
          name: publish-docs-branch
          <<: *only-branches
          context: pariveda-serverless-aws
          requires: [deploy-branch]

      # On master branches deploy and test to long-lived branches up to production
      - deploy:
          name: deploy-dev
          stage: dev
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [unit-test]
      - test-deployed-app:
          name: test-dev
          stage: dev
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [deploy-dev]
      - publish-docs:
          name: publish-docs-dev
          stage: dev
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [deploy-dev]

      - deploy:
          name: deploy-staging
          stage: staging
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [test-dev]
      - test-deployed-app:
          name: test-staging
          stage: staging
          <<: *only-master
          requires: [deploy-staging]
      - publish-docs:
          name: publish-docs-staging
          stage: staging
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [deploy-staging]

      - prod-approval:
          type: approval
          requires: [test-staging]
      - deploy:
          name: deploy-prod
          stage: prod
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [prod-approval]
      - test-deployed-app:
          name: test-prod
          stage: prod
          <<: *only-master
          requires: [deploy-prod]
      - publish-docs:
          name: publish-docs-prod
          stage: prod
          <<: *only-master
          context: pariveda-serverless-aws
          requires: [deploy-prod]
